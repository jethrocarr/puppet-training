Description: Puppet training environment (github.com/jethrocarr/puppet-training)

# All configuration that the user will probably want to adjust
Parameters:

  # Instance type option (has default t2.micro)
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    Description: Only t2.micro supported.

  # KeyName is the SSH public key to setup for the root account (required)
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: You must supply the keyname to use.

  # VpcId must be supplied - we don't launch a VPC as part of this stack, we
  # expect something to be supplied.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: You must supply a VPC ID

  # SubnetID must be supplied.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to use for the EC2 compute


# Mappings. These generally shouldn't need adjustment by user, but may need
# to be updated to reflect different regions/environments.
Mappings:
  AMI:
    ap-southeast-2:
      "AMI": ami-0bc1f168

# AWS Components
Resources:

  # We setup a single security group that allows connectivity between the
  # Puppet master and Puppet client servers, as well as SSH in from the network.
  Ec2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Puppet Training Compute Group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Management of server
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

        # Allow HTTP for testing webapp build training
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  # Because we want to self-reference the security group, this has to be setup
  # inside a seporate ingress rule. We want to allow the client to talk to the
  # Puppet master, but not allow access for the wider public internet. Note this
  # implication is overly lazy, a proper production stack should have two
  # different security groups so that the client can reach master, but not vice
  # versa.
  PuppetPortIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref Ec2SecurityGroup
      IpProtocol: tcp
      FromPort: 8140
      ToPort: 8140
      SourceSecurityGroupId: !Ref Ec2SecurityGroup


  # Define an instance profile that enables the servers to discover their tags
  # and each other using the CFN stack data. AWS IAM is a bit of a pain here
  # as there's no easy way we can see "just permit this box to look at itself
  # and any friends in it's CFN stack" :-(
  # TODO: Can we lock this down further?
  DefaultInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref DefaultInstanceRole

  DefaultInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  DefaultDiscoveryPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "StackMetadata"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: [ "ec2:DescribeTags", "cloudformation:DescribeStacks" ]
            Resource: "*"
      Roles:
        -
          Ref: "DefaultInstanceRole"


  # We need a Puppet Master EC2 instance
  PuppetMaster:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [AMI, !Ref "AWS::Region", AMI]
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      IamInstanceProfile: !Ref DefaultInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Join [ " ", [ !Ref "AWS::StackName", "Master" ] ]
        - Key: "User"
          Value: !Ref KeyName
      UserData: !Base64 "#include\nhttps://raw.githubusercontent.com/jethrocarr/puppet-training/master/resources/build-master.sh"

  # Client server for applying Puppet against.
  PuppetClient:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [AMI, !Ref "AWS::Region", AMI]
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      IamInstanceProfile: !Ref DefaultInstanceProfile
      Tags:
        - Key: "Name"
          Value: !Join [ " ", [ !Ref "AWS::StackName", "Client" ] ]
        - Key: "User"
          Value: !Ref KeyName
      UserData: !Base64 "#include\nhttps://raw.githubusercontent.com/jethrocarr/puppet-training/master/resources/build-client.sh"


# Return useful outputs we consume on-server at a later stage
Outputs:
  PuppetMasterAddress:
    Description: Private IP address of Puppet master
    Value: !GetAtt PuppetMaster.PrivateIp
  PuppetClientAddress:
    Description: Private IP address of Puppet client
    Value: !GetAtt PuppetClient.PrivateIp
